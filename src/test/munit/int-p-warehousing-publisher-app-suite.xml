<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="int-p-warehousing-publisher-app-suite.xml" />
	<munit:test name="get:\template:int-p-warehousing-publisher-app-config-test" doc:id="2a739841-1a2c-4bf4-98db-609fe7ddca60">
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="e530a5d5-983e-4a84-8cfc-7804731c738c">
				<munit:payload value="#[readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/xml" />
				<munit:attributes value="#[readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock read-xml-file" doc:id="49b67b30-bc2e-4452-a5fc-429681acadf3" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="read-xml-file" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/xml --- readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\mock_payload.dwl')]" mediaType="application/xml" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock http:request" doc:id="0cf02af7-17e7-4fe9-a87a-0ff06c184543" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="request-to-subscriber" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/xml --- readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\mock_payload.dwl')]" mediaType="application/xml" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\publisher:int-p-warehousing-publisher-app-config" doc:id="a17af80c-ce1e-4db1-bc8d-8045abc6f001" name="get:\publisher:int-p-warehousing-publisher-app-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="31763ff3-8664-418d-a191-1a76dc7ffaae" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import gettemplateintpwarehousingpublisherappconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\template:int-p-warehousing-publisher-app-config-delete" doc:id="2dd8a026-34ba-4cdd-ab7a-0dabb212ebb4">
			<munit:behavior>
				<munit:set-event doc:name="Set Input" doc:id="ad95e39d-6eb5-4c8e-9707-0b94c99e86a4">
					<munit:payload value="#[readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/xml" />
					<munit:attributes value="#[readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\set-event_attributes.dwl')]" />
					<munit:variables>
						<munit:variable key="outboundHeaders" value="#[readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\set-event_variable_.dwl')]" />
					</munit:variables>
				</munit:set-event>
				<munit-tools:mock-when doc:name="Mock read-xml-file" doc:id="142f710d-1d44-49d1-b327-e6ebd6b8f9ec" processor="file:read">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="read-xml-file" attributeName="doc:name" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/xml --- readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\mock_payload_delete.dwl')]" mediaType="application/xml" encoding="UTF-8" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit-tools:mock-when doc:name="Mock http:request" doc:id="39c90eab-951b-43e6-81cd-873b9c351bac" processor="http:request">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="request-to-subscriber" attributeName="doc:name" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:payload value="#[output application/xml --- readUrl('classpath://gettemplateintpwarehousingpublisherappconfigtest\mock_payload.dwl')]" mediaType="application/xml" encoding="UTF-8" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow-ref to get:\publisher:int-p-warehousing-publisher-app-config" doc:id="42fc2f72-c41b-4d9f-aa16-9c8bb5f347c9" name="get:\publisher:int-p-warehousing-publisher-app-config" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert doc:name="Assert payload" doc:id="2a69934c-0eb4-4e8a-aafe-7a755fc6c5d4" message="The payload does not match">
					<munit-tools:that><![CDATA[#[%dw 2.0
import gettemplateintpwarehousingpublisherappconfigtest::assert_expression_payload_delete
---
assert_expression_payload_delete::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
				</munit-tools:assert>
			</munit:validation>
		</munit:test>


</mule>
